@startuml Message Broker Sequence Diagram

!define RECTANGLE class

skinparam monochrome true
skinparam defaultFontName Source Sans Pro
skinparam defaultFontSize 14
skinparam shadowing false
skinparam sequence {
  ArrowColor Black
  ActorBorderColor Black
  LifeLineBorderColor Black
  LifeLineBackgroundColor Black
  ParticipantBorderColor Black
  ParticipantBackgroundColor White
  ParticipantFontColor Black
}

actor "Benchmarking Client" as Client
participant "Input Gateway" as Gateway
participant "Server" as Server
participant "Sender" as Sender
actor "WebSocket Client" as WSClient

== Initialization ==
WSClient -> Sender: Connect to ws://127.0.0.1:8080
activate Sender
Sender --> WSClient: Connection established
Sender -> Sender: Create AES-256-GCM cipher with shared key
Gateway -> Gateway: Create AES-256-GCM cipher with shared key

== Batch Message Flow ==
Client -> Gateway: POST /input/batch {"messages": [{"content": "Message1"}, ...]}
activate Gateway
Gateway -> Gateway: Serialize JSON (serde_json)
loop for each message
  Gateway -> Gateway: Generate random nonce (OsRng)
  Gateway -> Gateway: Encrypt message (AES-256-GCM)
end loop
Gateway -> Server: Store encrypted batch
activate Server
Server -> Server: Save to DashMap (in-memory)
Server -> Sender: Forward encrypted batch (Tokio MPSC channel)
deactivate Server
Gateway --> Client: 200 OK
deactivate Gateway
loop for each message
  Sender -> Sender: Decrypt message (AES-256-GCM)
  Sender -> Sender: Add to batch (up to 10 messages)
end loop
Sender -> Sender: Serialize batch to JSON
Sender -> WSClient: Push JSON array via WebSocket
deactivate Sender
WSClient -> WSClient: Parse JSON array
WSClient -> WSClient: Save to received_messages.json

== Error Handling (Example) ==
note over Sender
  If decryption fails, log warning and continue
end note
Sender -> Sender: Log "Decryption failed" (tracing::warn)
Sender -> Sender: Continue to next message

@enduml